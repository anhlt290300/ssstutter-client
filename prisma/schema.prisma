datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model categories {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String
  available Boolean @default(false)
}

model products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String
  tag         String?
  categories  String[] @db.ObjectId
  cost        Float
  discount    Float    @default(0)
  mark        String
  description String?
  colors      color[]
  avalable    Boolean  @default(true)
}

type color {
  mark   String
  title  String
  images String[]
  id     String   @map("_id") @db.ObjectId
}

model user {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  email       String        @unique
  image       String?
  address     String?
  phone       Int?
  password    String?
  active      Boolean       @default(false)
  role        Role          @default(USER)
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  activeToken activeToken[]
  cart        cart[]
}

model activeToken {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  token    String    @unique
  activeAt DateTime?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  user     user?     @relation(fields: [userId], references: [id])
  userId   String?   @db.ObjectId
}

model voucher {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  code     String   @unique
  createAt DateTime @default(now())
  expired  DateTime

  title           String
  description     String
  max_usage_count Int
  condition       voucher_condition
}

type voucher_condition {
  quantity_product Int?
  is_discount      Boolean?
  discount_amount  Float?
  discount_percent Float?
  //product_category 
}

model cart {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  user       user?        @relation(fields: [userId], references: [id])
  userId     String?      @db.ObjectId
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  cart_items cart_items[]
}

model cart_items {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @db.ObjectId
  productId String?  @db.ObjectId
  quantity  Int
  size      Int?
  color     String?
  status    Status   @default(VALID)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum Status {
  NOT_VALID
  VALID
  OUT_OF_STOCK
}

enum Role {
  USER
  ADMIN
}
